package com.agbu.android.lesson2;

public class homework_6 {
    public static void main(String[] args) {
        /* 442․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * օժանդական անկյունագծից վերև գտնվող բացասական տարրերի միջին թվաբանականը։  */

        int n = 20;
        int product = 1;
        int sum = 0;
        int a = 3;
        int b = 8;


        int[][] matrix = new int[n][n];

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++){
                matrix[i][j] = (i-2) * (j-2);
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();

        int count = 0;
        int size = matrix.length;

//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i + j < n - 1 && matrix[i][j] <= 0) {
//                    sum += matrix[i][j];
//                    count++;
//                }
//            }
//        }
//
//        System.out.println("442: " + sum/count);

        /* 443․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * գլխավոր անկյունագծից վերև գտնվող զրո արժեք ունեցող տարրերի քանակը։  */

//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i < j && matrix[i][j] == 0) {
//                    count++;
//                }
//            }
//        }
//
//        System.out.println("442: " + count);

        /* 444․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * գլխավոր անկյունագծից վերև գտնվող այն բացասական տարրերի քանակը, որոնք գտնվում են
          կենտ համարով տողերում */

//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i < j && matrix[i][j] < 0) {
//                    if (j % 2 == 1) {
//                        count++;
//                    }
//                }
//            }
//        }
//        System.out.println(count);

        /* 445․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * գլխավոր անկյունագծից ներքև գտնվող այն տարրերի քանակը, որոնք բացարձակ
          արժեքով մեծ են տրված k թվից։ */

//        int k = 3;
//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i < j) {
//                    if (matrix[i][j] > k) {
//                        count++;
//                    }
//                }
//            }
//        }
//        System.out.println(count);

        /* 446․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * գլխավոր անկյունագծից վերև կամ նրա վրա գտնվող այն տարրերի գումարը, որոնք պատկանում են
         տրված [a: b] միջակայքին  */

//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i >= j) {
//                    for ( a = 0; a < b; a++) {
//                        sum += matrix[i][j];
//                    }
//                }
//            }
//        }
//        System.out.println(sum);


        /* 447․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * օժանդական անկյունագծից ներքև կամ նրա վրա գտնվող այն տարրերի արտադրյալը, որոնք
          փոքր են տրված a թվից */

//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i + j <= n - 1 && matrix[i][j] < a) {
//                    product *= matrix[i][j];
//                }
//            }
//        }
//        System.out.println(product);

         /* 448․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * գլխավոր անկյունագծից վերև կամ նրա վրա գտնվող այն տարրերի միջին թվաբանականը, որոնց
        ինդեքսների գումարը զույգ է */

//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i >= j && (i + j) % 2 == 0) {
//                    sum += matrix[i][j];
//                    count++;
//                }
//            }
//        }
//        System.out.println(sum/count);

        /* 449․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * օժանդական անկյունագծից վերև գտնվող այն տարրերի գումարը, որոնց արժեքների ամբողջ
        մասը բազմապատիկ է 4 թվին։ */

//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i + j > n - 1 && matrix[i][j] % 4 == 0) {
//                    sum += matrix[i][j];
//                }
//            }
//        }
//        System.out.println(sum);

        /* 449․ Տրված են n ամբողջ թիվը և n x n չափի մատրից: Կազմել բլոկ-սխեմա և ծրագիր,
         որոնք կհաշվեն և կտպեն մատրիցի
        * օժանդական անկյունագծից ներքև գտնվող տարրերի արժեքների կոտորակային
         մասերի գումարը */


//        for (int i = 0; i < size; i++) {
//            for (int j = 0; j < size; j++){
//                if (i + j < n - 1) {
//                    sum += matrix[i][j];
//
//                }
//            }
//        }
    }
}
